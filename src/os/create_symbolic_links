#!/bin/bash

cd "$(dirname "${BASH_SOURCE[0]}")" &&
  . "utils"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

create_symlinks() {

  create_symlink "alacritty/alacritty.yml" "$HOME/.config/alacritty/alacritty.yml"
  create_symlink "development/clang-format"
  create_symlink "development/settings.json" "$HOME/.config/Code\ -\ OSS/User/settings.json"
  create_symlink "development/keybindings.json" "$HOME/.config/Code\ -\ OSS/User/keybindings.json"
  create_symlink "git/gitconfig"
  create_symlink "git/gitignore"
  create_symlink "sway/config" "$HOME/.config/sway/config"
  create_symlink "sway/default.pa" "$HOME/.config/pulse/default.pa"
  create_symlink "sway/happy_confirmation.wav" "$HOME/.config/sway/happy_confirmation.wav"
  create_symlink "sway/99-lowbat.rules" "/etc/udev/rules.d/99-lowbat.rules" "sudo-needed"
  create_symlink "sway/waybar/config" "$HOME/.config/waybar/config"
  create_symlink "sway/waybar/style.css" "$HOME/.config/waybar/style.css"
  create_symlink "mpv/*" "$HOME/.config/mpv/scripts/"
  create_symlink "nvim/init.toml" "$HOME/.SpaceVim.d/init.toml"
  create_symlink "nvim/autoload/*" "$HOME/.SpaceVim.d/autoload/"
  create_symlink "os/run_setup" "$HOME/.local/bin/run_setup"
  create_symlink "other/zathurarc" "$HOME/.config/zathura/zathurarc"
  create_symlink "scripts/*" "$HOME/.local/bin/"
  create_symlink "share/applications/*" "$HOME/.local/share/applications/"
  create_symlink "share/systemd/*" "$HOME/.local/share/systemd/"
  create_symlink "shell/zsh_aliases"
  create_symlink "shell/zsh_exports"
  create_symlink "shell/zsh_functions"
  create_symlink "shell/zshrc"
  create_symlink "shell/curlrc"
  create_symlink "shell/environment" "/etc/environment" "sudo-needed"
  create_symlink "tmux/tmux.conf"
}

create_symlink() {

  local sourceFile=""
  local targetFile=""
  local sudo=""

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  sourceFile="$(cd .. && pwd)/$1"
  if [ -z "$2" ]; then
    targetFile="$HOME/.$(printf "%s" "$1" | sed "s/.*\/\(.*\)/\1/g")"
  else
    targetFile="$2"
  fi

  if [ -n "$3" ] && [[ "$3" == "sudo-needed" ]]; then
    ask_for_sudo
    sudo="sudo"
  fi

  if [ ! -f "$targetFile" ]; then

    execute \
      "$sudo ln -fs $sourceFile $targetFile" \
      "$sourceFile → $targetFile"

  elif [ "$(readlink "$targetFile")" == "$sourceFile" ]; then
    print_success "$sourceFile → $targetFile"
  else

    ask_for_confirmation "'$targetFile' already exists, do you want to overwrite it?"
    if answer_is_yes; then

      $sudo rm -rf "$targetFile"

      execute \
        "$sudo ln -fs $sourceFile $targetFile" \
        "$sourceFile → $targetFile"

    else
      print_error "$sourceFile → $targetFile"
    fi

  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

main() {
  print_in_purple "\n • Create symbolic links\n\n"
  create_symlinks "$@"
}

main "$@"
