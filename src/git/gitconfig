[alias]

    a    = commit --amend
    br   = branch --list --remote
    c    = commit
    ca   = !git add -A && git commit             # Commit all changes.
    co   = checkout
    cp   = cherry-pick
    d    = diff
    dc   = diff --cached
    f    = fetch
    g    = log --graph --pretty=custom           # Show custom graph.
    l    = log --pretty=custom                   # Show custom log.
    lc   = shortlog --email --numbered --summary # List contributors.
    lg   = log --graph --date=relative --pretty=format:'%C(bold blue)%h%C(reset) - %C(green)(%ar) %C(white)%s %C(dim white) [%an] %C(bold yellow)%d'
    lgall= log --all --graph --date=relative --pretty=format:'%C(bold blue)%h%C(reset) - %C(green)(%ar) %C(white)%s %C(dim white) [%an] %C(bold yellow)%d'
    lh   = log -p -10 # Show custom log.
    p    = push
    rank = shortlog -sn --no-merges
    rlc  = reset --hard HEAD~1                   # Remove last commit.
    s    = status
    sres = reset --soft HEAD~1                   # Undo last commit.
    res  = reset --hard HEAD
    cl   = clean -fxd 
    sub  = submodule update --init --recursive
    w    = instaweb --httpd=webrick              # Start web-based visualizer.

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by source code.

    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by commit message.

    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit.

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches.

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[merge]

    tool = kdiff3
    keepBackup = false

[color "branch"]

    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]

    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]

    added = yellow
    changed = green
    untracked = cyan

[core]

    abbrev = 12
    attributesfile = ~/.gitattributes
    editor = nvim
    excludesfile = ~/.gitignore
    eol = lf
    autocrlf = false
    fileMode = false

[diff "bin"]

    # Use `hexdump` to diff binary files.

    textconv = hexdump -v -C

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)


[push]

    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out.

    default = simple
    followTags = true

[user]

    # Don't guess the user's identity.
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855

    useConfigOnly = true

[include]

    # Load local configs.
    # https://git-scm.com/docs/git-config#_includes
    #
    # [!] The following needs to remain at the end of this file in
    #     order to allow any of the above configs to be overwritten
    #     by the local ones

    path = ~/.gitconfig.local

[mergetool]

    keepBackup = false
