#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create data URI from a file.

datauri() {

  local mimeType=""

  if [ -f "$1" ]; then
    mimeType=$(file -b --mime-type "$1")
    #                └─ do not prepend the filename to the output

    if [[ $mimeType == text/* ]]; then
      mimeType="$mimeType;charset=utf-8"
    fi

    printf "data:%s;base64,%s" \
      "$mimeType" \
      "$(openssl base64 -in "$1" | tr -d "\n")"
  else
    printf "%s is not a file.\n" "$1"
  fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Delete files that match a certain pattern from the current directory.

delete-files() {
  local q="${1:-*.DS_Store}"
  find . -type f -name "$q" -ls -delete
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Get gzip information (gzipped file size + reduction size).

gz() {

  declare -i gzippedSize=0
  declare -i originalSize=0

  if [ -f "$1" ]; then
    if [ -s "$1" ]; then

      originalSize=$(wc -c <"$1")
      printf "\n original size:   %12s\n" "$(hrfs "$originalSize")"

      gzippedSize=$(gzip -c "$1" | wc -c)
      printf " gzipped size:    %12s\n" "$(hrfs "$gzippedSize")"

      printf " ─────────────────────────────\n"
      printf " reduction:       %12s [%s%%]\n\n" \
        "$(hrfs $((originalSize - gzippedSize)))" \
        "$(printf "%s" "$originalSize $gzippedSize" |
          awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' |
          sed -e "s/0*$//;s/\.$//")"
      #              └─ remove tailing zeros

    else
      printf "\"%s\" is empty.\n" "$1"
    fi
  else
    printf "\"%s\" is not a file.\n" "$1"
  fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Human readable file size
# (because `du -h` doesn't cut it for me).

hrfs() {

  printf "%s" "$1" |
    awk '{
            i = 1;
            split("B KB MB GB TB PB EB ZB YB WTFB", v);
            value = $1;

            # confirm that the input is a number
            if ( value + .0 == value ) {

                while ( value >= 1024 ) {
                    value/=1024;
                    i++;
                }

                if ( value == int(value) ) {
                    printf "%d %s", value, v[i]
                } else {
                    printf "%.1f %s", value, v[i]
                }

            }
        }' |
    sed -e ":l" \
      -e "s/\([0-9]\)\([0-9]\{3\}\)/\1,\2/; t l"
  #    └─ add thousands separator
  #       (changes "1023.2 KB" to "1,023.2 KB")
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create new directories and enter the first one.

mkd() {
  if [ -n "$*" ]; then

    mkdir -p "$@"
    #      └─ make parent directories if needed

    cd "$@" ||
      exit 1

  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search history.

qh() {
  #           ┌─ enable colors for pipe
  #           │  ("--color=auto" enables colors only if
  #           │  the output is in the terminal)
  grep --color=always "$*" "$HISTFILE" | less -RX
  # display ANSI color escape sequences in raw form ─┘│
  #       don't clear the screen after quitting less ─┘
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search for text within the current directory.

gp() { grep -rnIi "$1" . --color; }

gpf() { grep -nrIi --include \*."$1" "$2" . --color; }

op() { xdg-open $1 &> /dev/null & }

# Note functions

qn() {
  echo $1 >>$HOME/notes/quicknotes.md
}

n() {
  $EDITOR $HOME/notes/"$*".md
}

nls() {
  ls -c $HOME/notes/ | grep "$*"
}

rgv() {
  CHOICE=$(rg $* | fzf -0 -1 --ansi)
  if [ ! -z "$CHOICE" ]; then
    nvim $(echo "$CHOICE" | awk 'BEGIN { FS=":" } { printf "+%d %s\n", $2, $1 } ') +"Rg $*"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Extract archives
# usage: ex <file>

extract() {
  if [ -f $1 ]; then
    case $1 in
    *.tar.bz2) tar xjf $1 ;;
    *.tar.gz) tar xzf $1 ;;
    *.bz2) bunzip2 $1 ;;
    *.rar) unrar x $1 ;;
    *.gz) gunzip $1 ;;
    *.tar) tar xf $1 ;;
    *.tbz2) tar xjf $1 ;;
    *.tgz) tar xzf $1 ;;
    *.zip) unzip $1 ;;
    *.Z) uncompress $1 ;;
    *.7z) 7z x $1 ;;
    *) echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Docker functions

function cleandocker() {
  if [ -z "$1" ]; then
    echo "No param given, I guess you do not want to delete all your containers. :)"
    return
  fi
  for i in $(docker images | sed '1d' | grep "$1" | awk '{print $3}'); do
    echo ${i}
    docker rmi -f ${i}
  done
}

function cleannone() { docker rmi $(docker images | grep "<none>" | awk '{print $3}'); }


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# SSH functions

function start_agent {
     echo "Initialising new SSH agent..."
     /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
     echo succeeded
     chmod 600 "${SSH_ENV}"
     . "${SSH_ENV}" > /dev/null
     /usr/bin/ssh-add $HOME/.ssh/id_rsa;
}
