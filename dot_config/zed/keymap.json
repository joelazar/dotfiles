[
  {
    "context": "Workspace",
    "bindings": {
      "ctrl-z": "workspace::ToggleZoom"
    }
  },
  {
    "bindings": {
      "shift-tab": "menu::SelectPrev",
      "tab": "menu::SelectNext"
    }
  },
  {
    "context": "Dock || Terminal || Editor || ProjectPanel || CollabPanel || OutlinePanel || ChatPanel || VimControl || EmptyPane || SharedScreen || MarkdownPreview || KeyContextView",
    "bindings": {
      "ctrl-h": ["workspace::ActivatePaneInDirection", "Left"],
      "ctrl-l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-j": ["workspace::ActivatePaneInDirection", "Down"]
    }
  },
  {
    "context": "AssistantPanel",
    "bindings": {
      "ctrl-h": "assistant::ToggleFocus",
      // "ctrl-h": ["workspace::ActivatePaneInDirection", "Left"],
      "ctrl-l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-j": ["workspace::ActivatePaneInDirection", "Down"]
    }
  },
  {
    // put key-bindings here if you want them to work in normal & visual mode
    "context": "Editor && VimControl && !VimWaiting && !menu",
    "bindings": {
      "space b w": "pane::CloseInactiveItems",
      "space b W": "pane::CloseCleanItems",
      "space g h d": "editor::ToggleHunkDiff",
      "space g h r": "editor::RevertSelectedHunks",
      "space g y": "editor::CopyPermalinkToLine",
      "space l a": "editor::ToggleCodeActions",
      "space s s": "outline::Toggle",
      "space b f": "editor::Format",
      "space T b": "editor::ToggleGitBlame",
      "space T w": "editor::ToggleSoftWrap",
      "space T i": "editor::ToggleInlayHints",
      "space T z": "workspace::ToggleCenteredLayout",
      "space ,": "tab_switcher::Toggle",
      "space t": "workspace::NewCenterTerminal",
      "space G": ["task::Spawn", { "task_name": "lazygit" }],
      // "j": ["vim::Down", { "displayLines": true }],
      // "k": ["vim::Up", { "displayLines": true }],
      "enter": "editor::SelectLargerSyntaxNode",
      "backspace": "editor::SelectSmallerSyntaxNode",
      "g y": "editor::Copy",
      "g p": "editor::Paste",
      "space s w": ["task::Spawn", { "task_name": "search: project" }],
      "space s t": "pane::DeploySearch",
      "g f": "editor::OpenExcerpts",
      // cannot override default keybindings
      // "J": ["workspace::SendKeystrokes", "m z J ` z"]
      "alt-right": "pane::ActivateNextItem",
      "alt-left": "pane::ActivatePrevItem",
      "alt-,": "pane::SwapItemLeft",
      "alt-.": "pane::SwapItemRight",
      "alt-p": "pane::TogglePinTab"
    }
  },
  {
    // put key-bindings here if you want them to work only in normal mode
    "context": "Editor && VimControl && !VimWaiting && !menu",
    "bindings": {
      "g r": "editor::FindAllReferences"
    }
  },
  {
    "context": "Editor && vim_mode == normal && (vim_operator == none || vim_operator == n) && !VimWaiting",
    "bindings": {
      "space w": "workspace::Save",
      "Q": "pane::CloseActiveItem"
    }
  },
  {
    "context": "Editor && showing_completions",
    "bindings": {
      "enter": "editor::ConfirmCompletion",
      "ctrl-j": "editor::ConfirmCompletion",
      "shift-tab": "editor::ContextMenuPrev",
      "tab": "editor::ContextMenuNext"
    }
  },
  {
    "context": "Editor && mode == full && inline_completion",
    "bindings": {
      "tab": "editor::NextInlineCompletion",
      "shift-tab": "editor::PreviousInlineCompletion",
      "enter": "editor::AcceptPartialInlineCompletion",
      "ctrl-j": "editor::AcceptInlineCompletion"
    }
  },
  {
    // put key-bindings here if you want them to work in insert mode
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      "tab": "menu::SelectNext",
      "shift-tab": "menu::SelectPrev"
    }
  },
  {
    // Vim: File Tree ("ProjectPanel") actions
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "z c": "project_panel::CollapseSelectedEntry",
      "z o": "project_panel::ExpandSelectedEntry",
      "shift-o": "project_panel::RevealInFileManager",
      "r": "project_panel::Rename",
      "x": "project_panel::Cut",
      "y": "project_panel::Copy",
      "p": "project_panel::Paste",
      "d": "project_panel::Trash",
      "shift-d": ["project_panel::Trash", { "skip_prompt": true }],
      "a": "project_panel::NewFile",
      "shift-a": "project_panel::NewDirectory",
      "shift-y": "project_panel::CopyRelativePath",
      "g y": "project_panel::CopyPath",
      "space G": ["task::Spawn", { "task_name": "lazygit" }]
    }
  },
  {
    "context": "OutlinePanel",
    "bindings": {
      "h": "outline_panel::CollapseSelectedEntry",
      "l": "outline_panel::ExpandSelectedEntry",
      "o": "outline_panel::Open",
      "enter": "outline_panel::Open"
    }
  },
  {
    "context": "EmptyPane || SharedScreen || vim_operator == none && !VimWaiting && vim_mode != insert || ProjectPanel && not_editing",
    "bindings": {
      "space l d": "diagnostics::Deploy",
      "space s p": ["projects::OpenRecent", { "create_new_window": false }],
      "space s P": ["projects::OpenRecent", { "create_new_window": true }],
      "space t n": ["editor::SpawnNearestTask", { "reveal": "no_focus" }],
      "space t l": "task::Rerun",
      "space t L": ["task::Rerun", { "reevaluate_context": true }],
      "space t r": "task::Spawn",
      "space f": "pane::RevealInProjectPanel"
    }
  },
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !VimObject",
    "bindings": {
      "shift-s": ["vim::PushOperator", { "AddSurrounds": {} }],
      "p": ["vim::Paste", { "preserveClipboard": true }],
      "shift-p": ["vim::Paste", { "preserveClipboard": true }]
    }
  },
  {
    "context": "Editor && jupyter && !ContextEditor",
    "bindings": {
      "ctrl-shift-enter": "repl::Run",
      "ctrl-cmd-enter": "repl::RunInPlace"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "cmd-t": "workspace::NewTerminal",
      "cmd-n": "workspace::NewCenterTerminal",
      "alt-right": "pane::ActivateNextItem",
      "alt-left": "pane::ActivatePrevItem",
      "alt-,": "pane::SwapItemLeft",
      "alt-.": "pane::SwapItemRight",
      "alt-p": "pane::TogglePinTab"
    }
  },
  {
    "context": "TabSwitcher",
    "bindings": {
      "k": "menu::SelectPrev",
      "j": "menu::SelectNext",
      "x": "tab_switcher::CloseSelectedItem"
    }
  }
]
